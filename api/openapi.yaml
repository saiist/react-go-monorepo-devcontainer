openapi: 3.0.3
info:
  title: My App API
  version: 1.0.0
  description: My App API仕様書
  contact:
    name: APIサポート
    email: api@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: 開発サーバー
  - url: https://api.example.com/v1
    description: 本番サーバー

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Authorization: Bearer <token>'

  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: エラーの種類を示すエラーコード
          enum:
            - VALIDATION_ERROR
            - UNAUTHORIZED
            - FORBIDDEN
            - NOT_FOUND
            - CONFLICT
            - RATE_LIMIT_EXCEEDED
            - INTERNAL_ERROR
          example: 'VALIDATION_ERROR'
        message:
          type: string
          description: エラーメッセージ
          example: '検証に失敗しました'
        details:
          type: object
          description: 追加のエラー詳細（フィールド固有のエラー、メタデータなど）
          additionalProperties: true

    User:
      type: object
      required:
        - id
        - email
        - username
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 100
        fullName:
          type: string
          maxLength: 255
        avatarUrl:
          type: string
          format: uri
          maxLength: 500
        isActive:
          type: boolean
          default: true
        isVerified:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    CreateUserRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 100
        password:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$'
          description: 'パスワードは大文字、小文字、数字、特殊文字を少なくとも1つずつ含む必要があります'
        fullName:
          type: string
          maxLength: 255
        avatarUrl:
          type: string
          format: uri
          maxLength: 500
          default: ''

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 100
        fullName:
          type: string
          maxLength: 255
        avatarUrl:
          type: string
          format: uri
          maxLength: 500
          default: ''
        isActive:
          type: boolean
        isVerified:
          type: boolean

    RegisterRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 100
        password:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$'
          description: 'パスワードは大文字、小文字、数字、特殊文字を少なくとも1つずつ含む必要があります'
        fullName:
          type: string
          maxLength: 255

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/User'

paths:
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      tags:
        - system
      security: []
      responses:
        '200':
          description: サービスは正常です
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  version:
                    type: string
                    example: 1.0.0
                  timestamp:
                    type: string
                    format: date-time

  /auth/login:
    post:
      summary: User login
      operationId: login
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 認証情報が無効です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: トークンが更新されました
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string

  /auth/register:
    post:
      summary: Register a new user
      operationId: register
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: ユーザー登録に成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 検証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: ユーザーは既に存在します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get all users
      operationId: getUsers
      tags:
        - users
      parameters:
        - name: isActive
          in: query
          description: アクティブ状態でフィルタリング
          schema:
            type: boolean
        - name: isVerified
          in: query
          description: 検証状態でフィルタリング
          schema:
            type: boolean
        - name: search
          in: query
          description: メールアドレスまたはユーザー名で検索
          schema:
            type: string
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 1ページあたりのアイテム数
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new user (admin only)
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: ユーザーが作成されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 検証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: ユーザーは既に存在します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      summary: Get current user
      operationId: getCurrentUser
      tags:
        - users
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update current user
      operationId: updateCurrentUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: ユーザーが更新されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 検証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: ユーザーID
        schema:
          type: string
          format: uuid

    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - users
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: ユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a user (admin only)
      operationId: updateUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: ユーザーが更新されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 検証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a user (admin only)
      operationId: deleteUser
      tags:
        - users
      responses:
        '204':
          description: ユーザーが削除されました
        '404':
          description: ユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
